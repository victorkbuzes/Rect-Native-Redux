{"version":3,"sources":["../src/fireEvent.ts"],"names":["isHostElement","element","type","isTextInput","TextInput","require","isTouchResponder","props","onStartShouldSetResponder","isPointerEventEnabled","isParent","parentCondition","pointerEvents","parent","isTouchEvent","eventName","isEventEnabled","touchResponder","editable","touchStart","touchMove","onMoveShouldSetResponder","undefined","findEventHandler","callsite","nearestTouchResponder","handler","getEventHandler","eventHandlerName","toEventHandlerName","invokeEvent","data","returnValue","charAt","toUpperCase","slice","pressHandler","changeTextHandler","scrollHandler","fireEvent","press","changeText","scroll"],"mappings":"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","sourcesContent":["import { ReactTestInstance } from 'react-test-renderer';\nimport act from './act';\n\ntype EventHandler = (...args: any) => unknown;\n\nconst isHostElement = (element?: ReactTestInstance) => {\n  return typeof element?.type === 'string';\n};\n\nconst isTextInput = (element?: ReactTestInstance) => {\n  const { TextInput } = require('react-native');\n  return element?.type === TextInput;\n};\n\nconst isTouchResponder = (element?: ReactTestInstance) => {\n  if (!isHostElement(element)) return false;\n\n  return !!element?.props.onStartShouldSetResponder || isTextInput(element);\n};\n\nconst isPointerEventEnabled = (\n  element?: ReactTestInstance,\n  isParent?: boolean\n): boolean => {\n  const parentCondition = isParent\n    ? element?.props.pointerEvents === 'box-only'\n    : element?.props.pointerEvents === 'box-none';\n\n  if (element?.props.pointerEvents === 'none' || parentCondition) {\n    return false;\n  }\n\n  if (!element?.parent) return true;\n\n  return isPointerEventEnabled(element.parent, true);\n};\n\nconst isTouchEvent = (eventName?: string) => {\n  return eventName === 'press';\n};\n\nconst isEventEnabled = (\n  element?: ReactTestInstance,\n  touchResponder?: ReactTestInstance,\n  eventName?: string\n) => {\n  if (isTextInput(element)) return element?.props.editable !== false;\n  if (!isPointerEventEnabled(element) && isTouchEvent(eventName)) return false;\n\n  const touchStart = touchResponder?.props.onStartShouldSetResponder?.();\n  const touchMove = touchResponder?.props.onMoveShouldSetResponder?.();\n\n  if (touchStart || touchMove) return true;\n\n  return touchStart === undefined && touchMove === undefined;\n};\n\nconst findEventHandler = (\n  element: ReactTestInstance,\n  eventName: string,\n  callsite?: any,\n  nearestTouchResponder?: ReactTestInstance\n): EventHandler | null => {\n  const touchResponder = isTouchResponder(element)\n    ? element\n    : nearestTouchResponder;\n\n  const handler = getEventHandler(element, eventName);\n  if (handler && isEventEnabled(element, touchResponder, eventName))\n    return handler;\n\n  if (element.parent === null || element.parent.parent === null) {\n    return null;\n  }\n\n  return findEventHandler(element.parent, eventName, callsite, touchResponder);\n};\n\nconst getEventHandler = (\n  element: ReactTestInstance,\n  eventName: string\n): EventHandler | undefined => {\n  const eventHandlerName = toEventHandlerName(eventName);\n  if (typeof element.props[eventHandlerName] === 'function') {\n    return element.props[eventHandlerName];\n  }\n\n  if (typeof element.props[eventName] === 'function') {\n    return element.props[eventName];\n  }\n\n  return undefined;\n};\n\nconst invokeEvent = (\n  element: ReactTestInstance,\n  eventName: string,\n  callsite?: any,\n  ...data: Array<any>\n) => {\n  const handler = findEventHandler(element, eventName, callsite);\n\n  if (!handler) {\n    return;\n  }\n\n  let returnValue;\n\n  act(() => {\n    returnValue = handler(...data);\n  });\n\n  return returnValue;\n};\n\nconst toEventHandlerName = (eventName: string) =>\n  `on${eventName.charAt(0).toUpperCase()}${eventName.slice(1)}`;\n\nconst pressHandler = (element: ReactTestInstance, ...data: Array<any>): void =>\n  invokeEvent(element, 'press', pressHandler, ...data);\nconst changeTextHandler = (\n  element: ReactTestInstance,\n  ...data: Array<any>\n): void => invokeEvent(element, 'changeText', changeTextHandler, ...data);\nconst scrollHandler = (element: ReactTestInstance, ...data: Array<any>): void =>\n  invokeEvent(element, 'scroll', scrollHandler, ...data);\n\nconst fireEvent = (\n  element: ReactTestInstance,\n  eventName: string,\n  ...data: Array<any>\n): void => invokeEvent(element, eventName, fireEvent, ...data);\n\nfireEvent.press = pressHandler;\nfireEvent.changeText = changeTextHandler;\nfireEvent.scroll = scrollHandler;\n\nexport default fireEvent;\n"],"file":"fireEvent.js"}