{"version":3,"sources":["../../src/helpers/timers.ts"],"names":["globalObj","window","global","runWithRealTimers","callback","fakeTimersType","getJestFakeTimersType","jest","useRealTimers","callbackReturnValue","fakeTimersConfig","getFakeTimersConfigFromType","useFakeTimers","setTimeout","_isMockFunction","clock","getRealSystemTime","type","legacyFakeTimers","jestFakeTimersAreEnabled","Boolean","setImmediatePolyfill","fn","bindTimeFunctions","clearTimeoutFn","clearTimeout","setImmediateFn","setImmediate","setTimeoutFn"],"mappings":";;;;;;;;AAAA;;AACA;AACA,MAAMA,SAAS,GAAG,OAAOC,MAAP,KAAkB,WAAlB,GAAgCC,MAAhC,GAAyCD,MAA3D;;AAIA;AACA,SAASE,iBAAT,CAA8BC,QAA9B,EAAoD;AAClD,QAAMC,cAAc,GAAGC,qBAAqB,EAA5C;;AACA,MAAID,cAAJ,EAAoB;AAClBE,IAAAA,IAAI,CAACC,aAAL;AACD;;AAED,QAAMC,mBAAmB,GAAGL,QAAQ,EAApC;;AAEA,MAAIC,cAAJ,EAAoB;AAClB,UAAMK,gBAAgB,GAAGC,2BAA2B,CAACN,cAAD,CAApD;AACAE,IAAAA,IAAI,CAACK,aAAL,CAAmBF,gBAAnB;AACD;;AAED,SAAOD,mBAAP;AACD;;AAED,SAASH,qBAAT,GAAyD;AACvD;AACA,MACE,OAAOC,IAAP,KAAgB,WAAhB,IACA,OAAOP,SAAS,CAACa,UAAjB,KAAgC,WAFlC,EAGE;AACA,WAAO,IAAP;AACD;;AAED,OACE;AACA,SAAOb,SAAS,CAACa,UAAV,CAAqBC,eAA5B,KAAgD,WAAhD,IACA;AACAd,EAAAA,SAAS,CAACa,UAAV,CAAqBC,eAJvB,EAKE;AACA,WAAO,QAAP;AACD;;AAED,OACE;AACA,SAAOd,SAAS,CAACa,UAAV,CAAqBE,KAA5B,KAAsC,WAAtC,IACA,OAAOR,IAAI,CAACS,iBAAZ,KAAkC,WAHpC,EAIE;AACA,QAAI;AACF;AACAT,MAAAA,IAAI,CAACS,iBAAL;AACA,aAAO,QAAP;AACD,KAJD,CAIE,MAAM,CACN;AACD;AACF;;AAED,SAAO,IAAP;AACD;;AAED,SAASL,2BAAT,CAAqCM,IAArC,EAA4D;AAC1D,SAAOA,IAAI,KAAK,QAAT,GACH;AAAEC,IAAAA,gBAAgB,EAAE;AAApB,GADG,GAEH;AAAEA,IAAAA,gBAAgB,EAAE;AAApB,GAFJ;AAGD;;AAED,MAAMC,wBAAwB,GAAG,MAC/BC,OAAO,CAACd,qBAAqB,EAAtB,CADT,C,CAGA;;;;;AACA,SAASe,oBAAT,CAA8BC,EAA9B,EAA4C;AAC1C,SAAOtB,SAAS,CAACa,UAAV,CAAqBS,EAArB,EAAyB,CAAzB,CAAP;AACD;;AAQD,SAASC,iBAAT,GAAgD;AAC9C,SAAO;AACLC,IAAAA,cAAc,EAAExB,SAAS,CAACyB,YADrB;AAELC,IAAAA,cAAc,EAAE1B,SAAS,CAAC2B,YAAV,IAA0BN,oBAFrC;AAGLO,IAAAA,YAAY,EAAE5B,SAAS,CAACa;AAHnB,GAAP;AAKD;;AAED,MAAM;AAAEW,EAAAA,cAAF;AAAkBE,EAAAA,cAAlB;AAAkCE,EAAAA;AAAlC,IAAmDzB,iBAAiB,CACxEoB,iBADwE,CAA1E","sourcesContent":["// Most content of this file sourced directly from https://github.com/testing-library/dom-testing-library/blob/main/src/helpers.js\n/* globals jest */\nconst globalObj = typeof window === 'undefined' ? global : window;\n\ntype FakeTimersTypes = 'modern' | 'legacy';\n\n// Currently this fn only supports jest timers, but it could support other test runners in the future.\nfunction runWithRealTimers<T>(callback: () => T): T {\n  const fakeTimersType = getJestFakeTimersType();\n  if (fakeTimersType) {\n    jest.useRealTimers();\n  }\n\n  const callbackReturnValue = callback();\n\n  if (fakeTimersType) {\n    const fakeTimersConfig = getFakeTimersConfigFromType(fakeTimersType);\n    jest.useFakeTimers(fakeTimersConfig);\n  }\n\n  return callbackReturnValue;\n}\n\nfunction getJestFakeTimersType(): FakeTimersTypes | null {\n  // istanbul ignore if\n  if (\n    typeof jest === 'undefined' ||\n    typeof globalObj.setTimeout === 'undefined'\n  ) {\n    return null;\n  }\n\n  if (\n    // @ts-expect-error jest mutates setTimeout\n    typeof globalObj.setTimeout._isMockFunction !== 'undefined' &&\n    // @ts-expect-error jest mutates setTimeout\n    globalObj.setTimeout._isMockFunction\n  ) {\n    return 'legacy';\n  }\n\n  if (\n    // @ts-expect-error jest mutates setTimeout\n    typeof globalObj.setTimeout.clock !== 'undefined' &&\n    typeof jest.getRealSystemTime !== 'undefined'\n  ) {\n    try {\n      // jest.getRealSystemTime is only supported for Jest's `modern` fake timers and otherwise throws\n      jest.getRealSystemTime();\n      return 'modern';\n    } catch {\n      // not using Jest's modern fake timers\n    }\n  }\n\n  return null;\n}\n\nfunction getFakeTimersConfigFromType(type: FakeTimersTypes) {\n  return type === 'legacy'\n    ? { legacyFakeTimers: true }\n    : { legacyFakeTimers: false };\n}\n\nconst jestFakeTimersAreEnabled = (): boolean =>\n  Boolean(getJestFakeTimersType());\n\n// we only run our tests in node, and setImmediate is supported in node.\nfunction setImmediatePolyfill(fn: Function) {\n  return globalObj.setTimeout(fn, 0);\n}\n\ntype BindTimeFunctions = {\n  clearTimeoutFn: typeof clearTimeout;\n  setImmediateFn: typeof setImmediate;\n  setTimeoutFn: typeof setTimeout;\n};\n\nfunction bindTimeFunctions(): BindTimeFunctions {\n  return {\n    clearTimeoutFn: globalObj.clearTimeout,\n    setImmediateFn: globalObj.setImmediate || setImmediatePolyfill,\n    setTimeoutFn: globalObj.setTimeout,\n  };\n}\n\nconst { clearTimeoutFn, setImmediateFn, setTimeoutFn } = runWithRealTimers(\n  bindTimeFunctions\n) as BindTimeFunctions;\n\nexport {\n  runWithRealTimers,\n  jestFakeTimersAreEnabled,\n  clearTimeoutFn as clearTimeout,\n  setImmediateFn as setImmediate,\n  setTimeoutFn as setTimeout,\n};\n"],"file":"timers.js"}