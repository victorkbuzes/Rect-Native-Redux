{"version":3,"sources":["../../src/queries/hintText.ts"],"names":["queryAllByHintText","instance","queryAllByA11yHintFn","hint","findAll","node","type","props","accessibilityHint","getMultipleError","String","getMissingError","getBy","getAllBy","queryBy","queryAllBy","findBy","findAllBy","bindByHintTextQueries","getByHintText","getAllByHintText","queryByHintText","findByHintText","findAllByHintText","getByA11yHint","getAllByA11yHint","queryByA11yHint","queryAllByA11yHint","findByA11yHint","findAllByA11yHint","getByAccessibilityHint","getAllByAccessibilityHint","queryByAccessibilityHint","queryAllByAccessibilityHint","findByAccessibilityHint","findAllByAccessibilityHint"],"mappings":";;;;;;;AAEA;;AACA;;AAUA,MAAMA,kBAAkB,GACtBC,QADyB,IAGzB,SAASC,oBAAT,CAA8BC,IAA9B,EAAoC;AAClC,SAAOF,QAAQ,CAACG,OAAT,CACJC,IAAD,IACE,OAAOA,IAAI,CAACC,IAAZ,KAAqB,QAArB,IACA,sCAAgBD,IAAI,CAACE,KAAL,CAAWC,iBAA3B,EAA8CL,IAA9C,CAHG,CAAP;AAKD,CATH;;AAWA,MAAMM,gBAAgB,GAAIN,IAAD,IACtB,mDAAkDO,MAAM,CAACP,IAAD,CAAO,GADlE;;AAEA,MAAMQ,eAAe,GAAIR,IAAD,IACrB,qDAAoDO,MAAM,CAACP,IAAD,CAAO,EADpE;;AAGA,MAAM;AAAES,EAAAA,KAAF;AAASC,EAAAA,QAAT;AAAmBC,EAAAA,OAAnB;AAA4BC,EAAAA,UAA5B;AAAwCC,EAAAA,MAAxC;AAAgDC,EAAAA;AAAhD,IAA8D,8BAClEjB,kBADkE,EAElEW,eAFkE,EAGlEF,gBAHkE,CAApE;;AA+BO,MAAMS,qBAAqB,GAChCjB,QADmC,IAEb;AACtB,QAAMkB,aAAa,GAAGP,KAAK,CAACX,QAAD,CAA3B;AACA,QAAMmB,gBAAgB,GAAGP,QAAQ,CAACZ,QAAD,CAAjC;AACA,QAAMoB,eAAe,GAAGP,OAAO,CAACb,QAAD,CAA/B;AACA,QAAMD,kBAAkB,GAAGe,UAAU,CAACd,QAAD,CAArC;AACA,QAAMqB,cAAc,GAAGN,MAAM,CAACf,QAAD,CAA7B;AACA,QAAMsB,iBAAiB,GAAGN,SAAS,CAAChB,QAAD,CAAnC;AAEA,SAAO;AACLkB,IAAAA,aADK;AAELC,IAAAA,gBAFK;AAGLC,IAAAA,eAHK;AAILrB,IAAAA,kBAJK;AAKLsB,IAAAA,cALK;AAMLC,IAAAA,iBANK;AAQL;AACAC,IAAAA,aAAa,EAAEL,aATV;AAULM,IAAAA,gBAAgB,EAAEL,gBAVb;AAWLM,IAAAA,eAAe,EAAEL,eAXZ;AAYLM,IAAAA,kBAAkB,EAAE3B,kBAZf;AAaL4B,IAAAA,cAAc,EAAEN,cAbX;AAcLO,IAAAA,iBAAiB,EAAEN,iBAdd;AAgBL;AACAO,IAAAA,sBAAsB,EAAEX,aAjBnB;AAkBLY,IAAAA,yBAAyB,EAAEX,gBAlBtB;AAmBLY,IAAAA,wBAAwB,EAAEX,eAnBrB;AAoBLY,IAAAA,2BAA2B,EAAEjC,kBApBxB;AAqBLkC,IAAAA,uBAAuB,EAAEZ,cArBpB;AAsBLa,IAAAA,0BAA0B,EAAEZ;AAtBvB,GAAP;AAwBD,CAlCM","sourcesContent":["import type { ReactTestInstance } from 'react-test-renderer';\nimport { TextMatch } from '../matches';\nimport { matchStringProp } from '../helpers/matchers/matchStringProp';\nimport { makeQueries } from './makeQueries';\nimport type {\n  FindAllByQuery,\n  FindByQuery,\n  GetAllByQuery,\n  GetByQuery,\n  QueryAllByQuery,\n  QueryByQuery,\n} from './makeQueries';\n\nconst queryAllByHintText = (\n  instance: ReactTestInstance\n): ((hint: TextMatch) => Array<ReactTestInstance>) =>\n  function queryAllByA11yHintFn(hint) {\n    return instance.findAll(\n      (node) =>\n        typeof node.type === 'string' &&\n        matchStringProp(node.props.accessibilityHint, hint)\n    );\n  };\n\nconst getMultipleError = (hint: TextMatch) =>\n  `Found multiple elements with accessibilityHint: ${String(hint)} `;\nconst getMissingError = (hint: TextMatch) =>\n  `Unable to find an element with accessibilityHint: ${String(hint)}`;\n\nconst { getBy, getAllBy, queryBy, queryAllBy, findBy, findAllBy } = makeQueries(\n  queryAllByHintText,\n  getMissingError,\n  getMultipleError\n);\n\nexport type ByHintTextQueries = {\n  getByHintText: GetByQuery<TextMatch>;\n  getAllByHintText: GetAllByQuery<TextMatch>;\n  queryByHintText: QueryByQuery<TextMatch>;\n  queryAllByHintText: QueryAllByQuery<TextMatch>;\n  findByHintText: FindByQuery<TextMatch>;\n  findAllByHintText: FindAllByQuery<TextMatch>;\n\n  // a11yHint aliases\n  getByA11yHint: GetByQuery<TextMatch>;\n  getAllByA11yHint: GetAllByQuery<TextMatch>;\n  queryByA11yHint: QueryByQuery<TextMatch>;\n  queryAllByA11yHint: QueryAllByQuery<TextMatch>;\n  findByA11yHint: FindByQuery<TextMatch>;\n  findAllByA11yHint: FindAllByQuery<TextMatch>;\n\n  // accessibilityHint aliases\n  getByAccessibilityHint: GetByQuery<TextMatch>;\n  getAllByAccessibilityHint: GetAllByQuery<TextMatch>;\n  queryByAccessibilityHint: QueryByQuery<TextMatch>;\n  queryAllByAccessibilityHint: QueryAllByQuery<TextMatch>;\n  findByAccessibilityHint: FindByQuery<TextMatch>;\n  findAllByAccessibilityHint: FindAllByQuery<TextMatch>;\n};\n\nexport const bindByHintTextQueries = (\n  instance: ReactTestInstance\n): ByHintTextQueries => {\n  const getByHintText = getBy(instance);\n  const getAllByHintText = getAllBy(instance);\n  const queryByHintText = queryBy(instance);\n  const queryAllByHintText = queryAllBy(instance);\n  const findByHintText = findBy(instance);\n  const findAllByHintText = findAllBy(instance);\n\n  return {\n    getByHintText,\n    getAllByHintText,\n    queryByHintText,\n    queryAllByHintText,\n    findByHintText,\n    findAllByHintText,\n\n    // a11yHint aliases\n    getByA11yHint: getByHintText,\n    getAllByA11yHint: getAllByHintText,\n    queryByA11yHint: queryByHintText,\n    queryAllByA11yHint: queryAllByHintText,\n    findByA11yHint: findByHintText,\n    findAllByA11yHint: findAllByHintText,\n\n    // accessibilityHint aliases\n    getByAccessibilityHint: getByHintText,\n    getAllByAccessibilityHint: getAllByHintText,\n    queryByAccessibilityHint: queryByHintText,\n    queryAllByAccessibilityHint: queryAllByHintText,\n    findByAccessibilityHint: findByHintText,\n    findAllByAccessibilityHint: findAllByHintText,\n  };\n};\n"],"file":"hintText.js"}