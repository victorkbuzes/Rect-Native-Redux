{"version":3,"sources":["../../src/queries/makeQueries.ts"],"names":["makeQueries","queryAllByQuery","getMissingError","getMultipleError","getAllByQuery","instance","getAllFn","predicate","options","results","length","ErrorWithStack","queryByQuery","singleQueryFn","getByQuery","getFn","findAllByQuery","findAllFn","queryOptions","waitForOptions","findByQuery","findFn","getBy","getAllBy","queryBy","queryAllBy","findBy","findAllBy"],"mappings":";;;;;;;AACA;;AACA;;;;AA8CO,SAASA,WAAT,CACLC,eADK,EAELC,eAFK,EAGLC,gBAHK,EAI+B;AACpC,WAASC,aAAT,CAAuBC,QAAvB,EAAoD;AAClD,WAAO,SAASC,QAAT,CAAkBC,SAAlB,EAAwCC,OAAxC,EAA2D;AAChE,YAAMC,OAAO,GAAGR,eAAe,CAACI,QAAD,CAAf,CAA0BE,SAA1B,EAAqCC,OAArC,CAAhB;;AAEA,UAAIC,OAAO,CAACC,MAAR,KAAmB,CAAvB,EAA0B;AACxB,cAAM,IAAIC,sBAAJ,CAAmBT,eAAe,CAACK,SAAD,CAAlC,EAA+CD,QAA/C,CAAN;AACD;;AAED,aAAOG,OAAP;AACD,KARD;AASD;;AAED,WAASG,YAAT,CAAsBP,QAAtB,EAAmD;AACjD,WAAO,SAASQ,aAAT,CAAuBN,SAAvB,EAA6CC,OAA7C,EAAgE;AACrE,YAAMC,OAAO,GAAGR,eAAe,CAACI,QAAD,CAAf,CAA0BE,SAA1B,EAAqCC,OAArC,CAAhB;;AAEA,UAAIC,OAAO,CAACC,MAAR,GAAiB,CAArB,EAAwB;AACtB,cAAM,IAAIC,sBAAJ,CAAmBR,gBAAgB,CAACI,SAAD,CAAnC,EAAgDM,aAAhD,CAAN;AACD;;AAED,UAAIJ,OAAO,CAACC,MAAR,KAAmB,CAAvB,EAA0B;AACxB,eAAO,IAAP;AACD;;AAED,aAAOD,OAAO,CAAC,CAAD,CAAd;AACD,KAZD;AAaD;;AAED,WAASK,UAAT,CAAoBT,QAApB,EAAiD;AAC/C,WAAO,SAASU,KAAT,CAAeR,SAAf,EAAqCC,OAArC,EAAwD;AAC7D,YAAMC,OAAO,GAAGR,eAAe,CAACI,QAAD,CAAf,CAA0BE,SAA1B,EAAqCC,OAArC,CAAhB;;AAEA,UAAIC,OAAO,CAACC,MAAR,GAAiB,CAArB,EAAwB;AACtB,cAAM,IAAIC,sBAAJ,CAAmBR,gBAAgB,CAACI,SAAD,CAAnC,EAAgDQ,KAAhD,CAAN;AACD;;AAED,UAAIN,OAAO,CAACC,MAAR,KAAmB,CAAvB,EAA0B;AACxB,cAAM,IAAIC,sBAAJ,CAAmBT,eAAe,CAACK,SAAD,CAAlC,EAA+CQ,KAA/C,CAAN;AACD;;AAED,aAAON,OAAO,CAAC,CAAD,CAAd;AACD,KAZD;AAaD;;AAED,WAASO,cAAT,CAAwBX,QAAxB,EAAqD;AACnD,WAAO,SAASY,SAAT,CACLV,SADK,EAELW,YAFK,EAGLC,cAHK,EAIL;AACA,aAAO,sBACL,MAAMf,aAAa,CAACC,QAAD,CAAb,CAAwBE,SAAxB,EAAmCW,YAAnC,CADD,EAELC,cAFK,CAAP;AAID,KATD;AAUD;;AAED,WAASC,WAAT,CAAqBf,QAArB,EAAkD;AAChD,WAAO,SAASgB,MAAT,CACLd,SADK,EAELW,YAFK,EAGLC,cAHK,EAIL;AACA,aAAO,sBACL,MAAML,UAAU,CAACT,QAAD,CAAV,CAAqBE,SAArB,EAAgCW,YAAhC,CADD,EAELC,cAFK,CAAP;AAID,KATD;AAUD;;AAED,SAAO;AACLG,IAAAA,KAAK,EAAER,UADF;AAELS,IAAAA,QAAQ,EAAEnB,aAFL;AAGLoB,IAAAA,OAAO,EAAEZ,YAHJ;AAILa,IAAAA,UAAU,EAAExB,eAJP;AAKLyB,IAAAA,MAAM,EAAEN,WALH;AAMLO,IAAAA,SAAS,EAAEX;AANN,GAAP;AAQD","sourcesContent":["import type { ReactTestInstance } from 'react-test-renderer';\nimport { ErrorWithStack } from '../helpers/errors';\nimport waitFor from '../waitFor';\nimport type { WaitForOptions } from '../waitFor';\n\nexport type GetByQuery<Predicate, Options = void> = (\n  predicate: Predicate,\n  options?: Options\n) => ReactTestInstance;\n\nexport type GetAllByQuery<Predicate, Options = void> = (\n  predicate: Predicate,\n  options?: Options\n) => ReactTestInstance[];\n\nexport type QueryByQuery<Predicate, Options = void> = (\n  predicate: Predicate,\n  options?: Options\n) => ReactTestInstance | null;\n\nexport type QueryAllByQuery<Predicate, Options = void> = (\n  predicate: Predicate,\n  options?: Options\n) => ReactTestInstance[];\n\nexport type FindByQuery<Predicate, Options = void> = (\n  predicate: Predicate,\n  options?: Options,\n  waitForOptions?: WaitForOptions\n) => Promise<ReactTestInstance>;\n\nexport type FindAllByQuery<Predicate, Options = void> = (\n  predicate: Predicate,\n  options?: Options,\n  waitForOptions?: WaitForOptions\n) => Promise<ReactTestInstance[]>;\n\ntype UnboundQuery<Query> = (instance: ReactTestInstance) => Query;\n\nexport type UnboundQueries<Predicate, Options> = {\n  getBy: UnboundQuery<GetByQuery<Predicate, Options>>;\n  getAllBy: UnboundQuery<GetAllByQuery<Predicate, Options>>;\n  queryBy: UnboundQuery<QueryByQuery<Predicate, Options>>;\n  queryAllBy: UnboundQuery<QueryAllByQuery<Predicate, Options>>;\n  findBy: UnboundQuery<FindByQuery<Predicate, Options>>;\n  findAllBy: UnboundQuery<FindAllByQuery<Predicate, Options>>;\n};\n\nexport function makeQueries<Predicate, Options>(\n  queryAllByQuery: UnboundQuery<QueryAllByQuery<Predicate, Options>>,\n  getMissingError: (predicate: Predicate) => string,\n  getMultipleError: (predicate: Predicate) => string\n): UnboundQueries<Predicate, Options> {\n  function getAllByQuery(instance: ReactTestInstance) {\n    return function getAllFn(predicate: Predicate, options?: Options) {\n      const results = queryAllByQuery(instance)(predicate, options);\n\n      if (results.length === 0) {\n        throw new ErrorWithStack(getMissingError(predicate), getAllFn);\n      }\n\n      return results;\n    };\n  }\n\n  function queryByQuery(instance: ReactTestInstance) {\n    return function singleQueryFn(predicate: Predicate, options?: Options) {\n      const results = queryAllByQuery(instance)(predicate, options);\n\n      if (results.length > 1) {\n        throw new ErrorWithStack(getMultipleError(predicate), singleQueryFn);\n      }\n\n      if (results.length === 0) {\n        return null;\n      }\n\n      return results[0];\n    };\n  }\n\n  function getByQuery(instance: ReactTestInstance) {\n    return function getFn(predicate: Predicate, options?: Options) {\n      const results = queryAllByQuery(instance)(predicate, options);\n\n      if (results.length > 1) {\n        throw new ErrorWithStack(getMultipleError(predicate), getFn);\n      }\n\n      if (results.length === 0) {\n        throw new ErrorWithStack(getMissingError(predicate), getFn);\n      }\n\n      return results[0];\n    };\n  }\n\n  function findAllByQuery(instance: ReactTestInstance) {\n    return function findAllFn(\n      predicate: Predicate,\n      queryOptions?: Options,\n      waitForOptions?: WaitForOptions\n    ) {\n      return waitFor(\n        () => getAllByQuery(instance)(predicate, queryOptions),\n        waitForOptions\n      );\n    };\n  }\n\n  function findByQuery(instance: ReactTestInstance) {\n    return function findFn(\n      predicate: Predicate,\n      queryOptions?: Options,\n      waitForOptions?: WaitForOptions\n    ) {\n      return waitFor(\n        () => getByQuery(instance)(predicate, queryOptions),\n        waitForOptions\n      );\n    };\n  }\n\n  return {\n    getBy: getByQuery,\n    getAllBy: getAllByQuery,\n    queryBy: queryByQuery,\n    queryAllBy: queryAllByQuery,\n    findBy: findByQuery,\n    findAllBy: findAllByQuery,\n  };\n}\n"],"file":"makeQueries.js"}