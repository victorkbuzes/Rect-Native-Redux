{"version":3,"sources":["../../src/queries/role.ts"],"names":["queryAllByRole","instance","queryAllByRoleFn","role","findAll","node","type","props","accessibilityRole","getMultipleError","String","getMissingError","getBy","getAllBy","queryBy","queryAllBy","findBy","findAllBy","bindByRoleQueries","getByRole","getAllByRole","queryByRole","findByRole","findAllByRole"],"mappings":";;;;;;;AAEA;;AACA;;AAUA,MAAMA,cAAc,GAClBC,QADqB,IAGrB,SAASC,gBAAT,CAA0BC,IAA1B,EAAgC;AAC9B,SAAOF,QAAQ,CAACG,OAAT,CACJC,IAAD,IACE,OAAOA,IAAI,CAACC,IAAZ,KAAqB,QAArB,IACA,sCAAgBD,IAAI,CAACE,KAAL,CAAWC,iBAA3B,EAA8CL,IAA9C,CAHG,CAAP;AAKD,CATH;;AAWA,MAAMM,gBAAgB,GAAIN,IAAD,IACtB,mDAAkDO,MAAM,CAACP,IAAD,CAAO,GADlE;;AAEA,MAAMQ,eAAe,GAAIR,IAAD,IACrB,qDAAoDO,MAAM,CAACP,IAAD,CAAO,EADpE;;AAGA,MAAM;AAAES,EAAAA,KAAF;AAASC,EAAAA,QAAT;AAAmBC,EAAAA,OAAnB;AAA4BC,EAAAA,UAA5B;AAAwCC,EAAAA,MAAxC;AAAgDC,EAAAA;AAAhD,IAA8D,8BAClEjB,cADkE,EAElEW,eAFkE,EAGlEF,gBAHkE,CAApE;;AAeO,MAAMS,iBAAiB,GAC5BjB,QAD+B,KAEZ;AACnBkB,EAAAA,SAAS,EAAEP,KAAK,CAACX,QAAD,CADG;AAEnBmB,EAAAA,YAAY,EAAEP,QAAQ,CAACZ,QAAD,CAFH;AAGnBoB,EAAAA,WAAW,EAAEP,OAAO,CAACb,QAAD,CAHD;AAInBD,EAAAA,cAAc,EAAEe,UAAU,CAACd,QAAD,CAJP;AAKnBqB,EAAAA,UAAU,EAAEN,MAAM,CAACf,QAAD,CALC;AAMnBsB,EAAAA,aAAa,EAAEN,SAAS,CAAChB,QAAD;AANL,CAFY,CAA1B","sourcesContent":["import type { ReactTestInstance } from 'react-test-renderer';\nimport { TextMatch } from '../matches';\nimport { matchStringProp } from '../helpers/matchers/matchStringProp';\nimport { makeQueries } from './makeQueries';\nimport type {\n  FindAllByQuery,\n  FindByQuery,\n  GetAllByQuery,\n  GetByQuery,\n  QueryAllByQuery,\n  QueryByQuery,\n} from './makeQueries';\n\nconst queryAllByRole = (\n  instance: ReactTestInstance\n): ((role: TextMatch) => Array<ReactTestInstance>) =>\n  function queryAllByRoleFn(role) {\n    return instance.findAll(\n      (node) =>\n        typeof node.type === 'string' &&\n        matchStringProp(node.props.accessibilityRole, role)\n    );\n  };\n\nconst getMultipleError = (role: TextMatch) =>\n  `Found multiple elements with accessibilityRole: ${String(role)} `;\nconst getMissingError = (role: TextMatch) =>\n  `Unable to find an element with accessibilityRole: ${String(role)}`;\n\nconst { getBy, getAllBy, queryBy, queryAllBy, findBy, findAllBy } = makeQueries(\n  queryAllByRole,\n  getMissingError,\n  getMultipleError\n);\n\nexport type ByRoleQueries = {\n  getByRole: GetByQuery<TextMatch>;\n  getAllByRole: GetAllByQuery<TextMatch>;\n  queryByRole: QueryByQuery<TextMatch>;\n  queryAllByRole: QueryAllByQuery<TextMatch>;\n  findByRole: FindByQuery<TextMatch>;\n  findAllByRole: FindAllByQuery<TextMatch>;\n};\n\nexport const bindByRoleQueries = (\n  instance: ReactTestInstance\n): ByRoleQueries => ({\n  getByRole: getBy(instance),\n  getAllByRole: getAllBy(instance),\n  queryByRole: queryBy(instance),\n  queryAllByRole: queryAllBy(instance),\n  findByRole: findBy(instance),\n  findAllByRole: findAllBy(instance),\n});\n"],"file":"role.js"}